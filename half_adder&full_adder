module half_adder(input a,b,
	          output sum,carry);
				
   assign sum   = a ^ b;
   assign carry = a & b;

endmodule


module full_adder(input a_in,b_in,c_in,output sum_out,carry_out);
		  
      wire w1,w2,w3;
		
half_adder HA1(a_in,b_in,w1,w2);		
half_adder HA2(w1,c_in,sum_out,w3);	
or or1(carry_out,w2,w3);	  
endmodule


TESTBENCH
module full_adder_tb();
		
   //Testbench global variables
   reg   a,b,cin;
   wire  sum,carry;

   //Variable for loop iteration 
   integer i;

   //Step1 : Instantiate the full adder with order based port mapping
	full_adder FA1(a,b,cin,sum,carry);

   //Process to initialize the variables at 0ns
   initial 
      begin
         a   = 1'b0;
	 b   = 1'b0;
	 cin = 1'b0;
      end
				
   //Process to generate stimulus using for loop
   initial
      begin 
	 for (i=0;i<8;i=i+1)
	    begin
	       {a,b,cin}=i;
	       #10;
	    end
      end
				
   //Process to monitor the changes in the variables
   initial 
      $monitor("Input a=%b, b=%b, c=%b, Output sum =%b, carry=%b",a,b,cin,sum,carry);
									
   //Process to terminate simulation after 100ns
   initial #100 $finish;
			
   endmodule
